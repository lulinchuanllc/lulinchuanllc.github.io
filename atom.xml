<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陆林川的博客</title>
  
  <subtitle>我是我过去的总和</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-10T07:28:59.897Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>陆林川</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vuex原理</title>
    <link href="http://example.com/2021/04/25/vuex%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2021/04/25/vuex%E5%8E%9F%E7%90%86/</id>
    <published>2021-04-25T09:01:25.000Z</published>
    <updated>2021-05-10T07:28:59.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vuex的使用方式"><a href="#vuex的使用方式" class="headerlink" title="vuex的使用方式"></a>vuex的使用方式</h1><p>我们首先回顾以下vuex是怎么用的，有哪些功能，这样我们才能知道需要模拟哪些特性</p><h2 id="store-js中初始化vuex的实例"><a href="#store-js中初始化vuex的实例" class="headerlink" title="store.js中初始化vuex的实例"></a><code>store.js</code>中初始化vuex的实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        name: <span class="string">&#x27;Tim&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="function"><span class="title">updateName</span>(<span class="params">state, name</span>)</span> &#123;</span><br><span class="line">            state.name = name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="function"><span class="title">updateNameSync</span>(<span class="params">&#123;commit&#125;, name</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                commit(<span class="string">&#x27;updateName&#x27;</span>, name)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        <span class="function"><span class="title">fullName</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.name + <span class="string">&#x27;Lu&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;</span><br><span class="line">        a: &#123;</span><br><span class="line">            state: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">                age: <span class="number">18</span></span><br><span class="line">            &#125;),</span><br><span class="line">            mutations: &#123;</span><br><span class="line">                <span class="function"><span class="title">updateAge</span>(<span class="params">state, age</span>)</span> &#123;</span><br><span class="line">                    state.age = age</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            actions: &#123;</span><br><span class="line">                <span class="function"><span class="title">updateAgeSync</span>(<span class="params">&#123; commit &#125;, age</span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        commit(<span class="string">&#x27;updateAge&#x27;</span>, age)</span><br><span class="line">                    &#125;, <span class="number">1000</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            getters: &#123;</span><br><span class="line">                <span class="function"><span class="title">isChild</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> state.age &lt;= <span class="number">12</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="main-js中初始化vue实例"><a href="#main-js中初始化vue实例" class="headerlink" title="main.js中初始化vue实例"></a><code>main.js</code>中初始化vue实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    store,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="App-vue中使用vuex"><a href="#App-vue中使用vuex" class="headerlink" title="App.vue中使用vuex"></a><code>App.vue</code>中使用<code>vuex</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-name&quot;</span>&gt;</span>&#123;&#123;userName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-full-name&quot;</span>&gt;</span>&#123;&#123;userFullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-age&quot;</span>&gt;</span>&#123;&#123;userAge&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-type&quot;</span>&gt;</span>&#123;&#123;isChild ? &#x27;儿童&#x27; : &#x27;成人&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">userName</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.name</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">userFullName</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.fullName</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">userAge</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.a.age</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">isChild</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters[<span class="string">&#x27;a/isChild&#x27;</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;updateName&#x27;</span>,<span class="string">&#x27;Jack&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;a/updateAge&#x27;</span>,<span class="string">&#x27;8&#x27;</span>)</span></span><br><span class="line">        &#125;, 1000)</span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;updateNameSync&#x27;</span>,<span class="string">&#x27;Bill&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;a/updateAgeSync&#x27;</span>,<span class="string">&#x27;18&#x27;</span>)</span></span><br><span class="line">        &#125;, 5000)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="需要实现的功能"><a href="#需要实现的功能" class="headerlink" title="需要实现的功能"></a>需要实现的功能</h2><ul><li><code>state</code>存储公共数据，并且不能直接修改</li><li><code>commit</code>提交修改，同步更新<code>state</code></li><li><code>actions</code>提交的是<code>commit</code>，并且可以是异步执行的</li><li><code>getter</code>可以由<code>state</code>计算得到新的值</li><li><code>modules</code>可以包含更多的子模块</li><li>使用<code>Vue.use(vuex)</code>来注入到<code>vue</code>中</li><li>在<code>vue</code>的实例中，注入全局的<code>store</code></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;vuex的使用方式&quot;&gt;&lt;a href=&quot;#vuex的使用方式&quot; class=&quot;headerlink&quot; title=&quot;vuex的使用方式&quot;&gt;&lt;/a&gt;vuex的使用方式&lt;/h1&gt;&lt;p&gt;我们首先回顾以下vuex是怎么用的，有哪些功能，这样我们才能知道需要模拟哪些特性&lt;/p&gt;
&lt;h2 id=&quot;store-js中初始化vuex的实例&quot;&gt;&lt;a href=&quot;#store-js中初始化vuex的实例&quot; class=&quot;headerlink&quot; title=&quot;store.js中初始化vuex的实例&quot;&gt;&lt;/a&gt;&lt;code&gt;store.js&lt;/code&gt;中初始化vuex的实例&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Vue &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;vue&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Vuex &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;vuex&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vue.use(vuex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; store = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vuex.Store(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name: &lt;span class=&quot;string&quot;&gt;&amp;#x27;Tim&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mutations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;updateName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state, name&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            state.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    actions: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;updateNameSync&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&amp;#123;commit&amp;#125;, name&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                commit(&lt;span class=&quot;string&quot;&gt;&amp;#x27;updateName&amp;#x27;&lt;/span&gt;, name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getters: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;fullName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state.name + &lt;span class=&quot;string&quot;&gt;&amp;#x27;Lu&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    modules: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            state: &lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                age: &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mutations: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;updateAge&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state, age&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    state.age = age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            actions: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;updateAgeSync&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&amp;#123; commit &amp;#125;, age&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        commit(&lt;span class=&quot;string&quot;&gt;&amp;#x27;updateAge&amp;#x27;&lt;/span&gt;, age)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            getters: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isChild&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state.age &amp;lt;= &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; store&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
    <category term="vuex" scheme="http://example.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>节流和防抖</title>
    <link href="http://example.com/2021/04/25/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/"/>
    <id>http://example.com/2021/04/25/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</id>
    <published>2021-04-25T05:47:03.000Z</published>
    <updated>2021-04-25T07:10:01.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h1><p>在前端交互中，有一些操作的频率很密集，比如滚动、鼠标移动、鼠标点击、用户输入等，发生这些事件时，我们需要执行自己的逻辑，但如果不限制频率，就会短时间内被反复触发，所以我们需要限制其中的频率但是又不影响实际的效果。<br>这里就涉及到两个概念，<code>throttle节流</code>和<code>debounce防抖</code></p><span id="more"></span><h1 id="throttle节流"><a href="#throttle节流" class="headerlink" title="throttle节流"></a>throttle节流</h1><p>即使事件一直触发，但是在预设的时间内，也只响应一次对应逻辑。比如一直有人源源不断地在公交站等车，但是公交车都是按10分钟一趟的频率发车，车到了这一波人人才上车，而不是来一个人发一趟车。</p><h2 id="时间戳节流"><a href="#时间戳节流" class="headerlink" title="时间戳节流"></a>时间戳节流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">const</span> args = <span class="built_in">arguments</span></span><br><span class="line">        <span class="keyword">const</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">        <span class="keyword">if</span>(now - start &gt;= delay) &#123;</span><br><span class="line">            func.apply(that, args)</span><br><span class="line">            start = <span class="built_in">Date</span>.now()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="setTimeout节流"><a href="#setTimeout节流" class="headerlink" title="setTimeout节流"></a>setTimeout节流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">const</span> args = <span class="built_in">arguments</span></span><br><span class="line">        <span class="keyword">if</span>(timer) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn.apply(that, args)</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="debounce防抖"><a href="#debounce防抖" class="headerlink" title="debounce防抖"></a>debounce防抖</h1><p>如果事件一直触发，那么就等事件在预设的时间内没有再次触发，才执行对应逻辑。比如电梯，一直有人上来，那么就不关门，等到几秒内都没有人进出了，再关门。</p><h2 id="setTimeout防抖"><a href="#setTimeout防抖" class="headerlink" title="setTimeout防抖"></a>setTimeout防抖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">const</span> args = <span class="built_in">arguments</span></span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            func.apply(that, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概念解释&quot;&gt;&lt;a href=&quot;#概念解释&quot; class=&quot;headerlink&quot; title=&quot;概念解释&quot;&gt;&lt;/a&gt;概念解释&lt;/h1&gt;&lt;p&gt;在前端交互中，有一些操作的频率很密集，比如滚动、鼠标移动、鼠标点击、用户输入等，发生这些事件时，我们需要执行自己的逻辑，但如果不限制频率，就会短时间内被反复触发，所以我们需要限制其中的频率但是又不影响实际的效果。&lt;br&gt;这里就涉及到两个概念，&lt;code&gt;throttle节流&lt;/code&gt;和&lt;code&gt;debounce防抖&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>XSS攻击</title>
    <link href="http://example.com/2021/04/19/XSS%E6%94%BB%E5%87%BB/"/>
    <id>http://example.com/2021/04/19/XSS%E6%94%BB%E5%87%BB/</id>
    <published>2021-04-19T14:55:49.000Z</published>
    <updated>2021-04-25T05:01:16.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是XSS攻击"><a href="#什么是XSS攻击" class="headerlink" title="什么是XSS攻击"></a>什么是XSS攻击</h1><blockquote><p><code>XSS</code>全称是跨站脚本攻击<code>Cross-site scripting</code>，顾名思义，就是当正常用户访问网站时，网站上出现了一些恶意的代码，导致攻击者可以获取到用户信息或者是诱导用户到其他网站。</p></blockquote><p>主要的原因是我们的js脚本是可以通过<code>script</code>标签来引入的，所以有的人会千方百计地使页面能加载他们的脚本，顺着这个思路，我们就能想出好几种方法做到。</p><span id="more"></span><h1 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h1><h2 id="攻击步骤"><a href="#攻击步骤" class="headerlink" title="攻击步骤"></a>攻击步骤</h2><ul><li>攻击者通过可输入的区域，向目标网站后台提交恶意代码，恶意代码被存入数据库</li><li>有用户打开网站时，网站后台把恶意代码从数据库去除，渲染出html，返回给浏览器</li><li>浏览器收到html，解析并执行，混在其中的恶意代码就会被解析成对应的script脚本</li><li>恶意代码就可以肆无忌惮执行自己的逻辑了</li></ul><h2 id="可输入用户内容的区域"><a href="#可输入用户内容的区域" class="headerlink" title="可输入用户内容的区域"></a>可输入用户内容的区域</h2><p>比如个人信息、评论、私信等，这些可输入的区域如果用户不是输入的正常内容，那么这些内容被服务器收录记录后，再次使用这些数据时，页面就会渲染异常，夹带上额外的js脚本，就可能被恶意攻击。<br>比如可以输入用户名，名字是正常的时候，页面渲染是正确的<br>如果用户输入的不是正常的名字，而是一段特殊的脚本代码<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>，那么展示的时候，就会把这段代码执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 正常的用户名</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Tim&quot;</span>&gt;</span></span><br><span class="line">// 恶意代码片段</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h1><h2 id="攻击步骤-1"><a href="#攻击步骤-1" class="headerlink" title="攻击步骤"></a>攻击步骤</h2><ul><li>构造一个特殊的URL，恶意代码就藏在URL中</li><li>其他人打开带有恶意代码的URL，后台把恶意代码从URL里取出来，拼接到网页的模板中，返回给浏览器</li><li>浏览器解析对应的页面，其中的恶意代码就会被执行</li></ul><h2 id="页面使用链接中带的参数"><a href="#页面使用链接中带的参数" class="headerlink" title="页面使用链接中带的参数"></a>页面使用链接中带的参数</h2><p>一般而言，搜索页面的链接中会带有搜索参数，比如<code>https://www.a.com/search?k=1</code>，这里搜索的参数是<code>1</code>，但是如果这些参数不是正常的值，而是<code>&quot;/&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>，最终拼接出来的链接就是<code>https://www.a.com/search?k=&quot;/&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>，当页面取用这个参数在服务端渲染时，就会渲染出额外的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 服务端的渲染模板是这样的</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;keyword&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">// 最终渲染出来的html是这样的</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h1><h2 id="攻击步骤-2"><a href="#攻击步骤-2" class="headerlink" title="攻击步骤"></a>攻击步骤</h2><ul><li>构造一个特殊的URL，恶意代码就藏在URL中</li><li>其他人打开带有恶意代码的URL，前端js把恶意代码从URL里取出来，拼接到网页的模板中，恶意代码就会被执行</li></ul><h2 id="页面使用链接中带的参数-1"><a href="#页面使用链接中带的参数-1" class="headerlink" title="页面使用链接中带的参数"></a>页面使用链接中带的参数</h2><p>DOM型XSS和反射型是很类似的，区别就在于一个是客户端渲染，一个是服务端渲染，本质都是拿了链接中的恶意代码，直接拼接或者替换到HTML中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 客户端的渲染模板是这样的</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;keyword&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">// 最终渲染出来的html是这样的</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="几种攻击类型的总结"><a href="#几种攻击类型的总结" class="headerlink" title="几种攻击类型的总结"></a>几种攻击类型的总结</h1><table><thead><tr><th>类型</th><th>存储区</th><th>插入点</th></tr></thead><tbody><tr><td>存储型 XSS</td><td>后端数据库</td><td>HTML</td></tr><tr><td>反射型 XSS</td><td>URL</td><td>HTML</td></tr><tr><td>DOM 型 XSS</td><td>后端数据库/前端存储/URL</td><td>前端 JavaScript</td></tr></tbody></table><h1 id="如何预防XSS攻击"><a href="#如何预防XSS攻击" class="headerlink" title="如何预防XSS攻击"></a>如何预防XSS攻击</h1><ul><li>使用内容安全策略<code>Content Security Policy</code>，简称CSP，主要的两点作用，一个是禁止加载外域的脚本，一个是禁止外域请求的提交。</li><li>一切可输入的地方，都限制内容长度</li><li>一切可输入的地方，都要进行XSS过滤和内容转义</li><li>给Cookie加上<code>http-only</code>的限制，可禁止js读取到Cookie</li></ul><h1 id="攻击方式的补充"><a href="#攻击方式的补充" class="headerlink" title="攻击方式的补充"></a>攻击方式的补充</h1><h2 id="利用img标签"><a href="#利用img标签" class="headerlink" title="利用img标签"></a>利用img标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Tim&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;w.123&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span>&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Cross-site_scripting">Cross-site scripting（跨站脚本攻击）</a></p><p><a href="https://tech.meituan.com/2018/09/27/fe-security.html">前端安全系列（一）：如何防止XSS攻击？</a></p><p><a href="https://segmentfault.com/a/1190000022348467">XSS攻击常识及常见的XSS攻击脚本汇总</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是XSS攻击&quot;&gt;&lt;a href=&quot;#什么是XSS攻击&quot; class=&quot;headerlink&quot; title=&quot;什么是XSS攻击&quot;&gt;&lt;/a&gt;什么是XSS攻击&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;XSS&lt;/code&gt;全称是跨站脚本攻击&lt;code&gt;Cross-site scripting&lt;/code&gt;，顾名思义，就是当正常用户访问网站时，网站上出现了一些恶意的代码，导致攻击者可以获取到用户信息或者是诱导用户到其他网站。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要的原因是我们的js脚本是可以通过&lt;code&gt;script&lt;/code&gt;标签来引入的，所以有的人会千方百计地使页面能加载他们的脚本，顺着这个思路，我们就能想出好几种方法做到。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络安全" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSRF攻击</title>
    <link href="http://example.com/2021/04/19/CSRF%E6%94%BB%E5%87%BB/"/>
    <id>http://example.com/2021/04/19/CSRF%E6%94%BB%E5%87%BB/</id>
    <published>2021-04-19T14:55:31.000Z</published>
    <updated>2021-04-25T05:43:47.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h1><p><code>CSRF</code>的全称是<code>Cross-Site Request Forgery</code>，跨站点请求伪造。从中文意思来看就是，其他的网站，伪造一个请求，从而骗过目标网站，让它以为这个请求是你本人发起的。</p><span id="more"></span><h1 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h1><ul><li>用户打开浏览器，访问网站A并且登陆自己的账户</li><li>在网站A的登陆信息还有效时，用户访问了另外一个网站B</li><li>网站B偷偷发起一个请求，访问了网站A</li><li>此时由于你网站A的登陆信息还有效，所以网站A的后台并不知道这个请求是网站B伪造的，所以响应了请求</li><li>GG</li></ul><h1 id="实际攻击场景"><a href="#实际攻击场景" class="headerlink" title="实际攻击场景"></a>实际攻击场景</h1><ul><li>银行转账</li><li>给邮箱增设转发规则，把你的邮件都转发到另一个账户去</li><li>用你的账户发帖、点赞、转发、发私信等等</li></ul><h1 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h1><ul><li>同源检测，检测请求中的Referer和Origin是否是自己的网站</li><li><code>Samesite Cookie</code>防护<ul><li>如果设置<code>Set-Cookie: token=1; Samesite=Strict</code>，则Cookie不能被跨域请求中携带，这样登陆信息就不会泄露</li><li>如果设置<code>Set-Cookie: token=1; Samesite=Lax</code>，则Cookie可在<code>&lt;a href=&quot;xxx&quot;&gt;&lt;/a&gt;</code>、<code>&lt;link rel=&quot;prerender&quot; href=&quot;xxx&quot;/&gt;</code>、<code>&lt;form method=&quot;GET&quot; sction=&quot;&quot;&gt;</code>这几种情况下发送，这个也是默认值</li><li>如果设置<code>Set-Cookie: token=1; Samesite=None; Secure</code>则可以关闭这个限制，但注意必须同时设置<code>Secure</code>保证<code>Cookie</code>只能在<code>HTTPS</code>下传输</li></ul></li></ul><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html">Cookie 的 SameSite 属性</a><br><a href="https://tech.meituan.com/2018/10/11/fe-security-csrf.html">前端安全系列（二）：如何防止CSRF攻击？</a><br><a href="https://segmentfault.com/a/1190000037725856">CSRF攻击原理与常见解决方案</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概念解释&quot;&gt;&lt;a href=&quot;#概念解释&quot; class=&quot;headerlink&quot; title=&quot;概念解释&quot;&gt;&lt;/a&gt;概念解释&lt;/h1&gt;&lt;p&gt;&lt;code&gt;CSRF&lt;/code&gt;的全称是&lt;code&gt;Cross-Site Request Forgery&lt;/code&gt;，跨站点请求伪造。从中文意思来看就是，其他的网站，伪造一个请求，从而骗过目标网站，让它以为这个请求是你本人发起的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络安全" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>堆内存和栈内存的区别</title>
    <link href="http://example.com/2021/04/19/%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/04/19/%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-04-19T14:51:21.000Z</published>
    <updated>2021-04-19T14:53:32.976Z</updated>
    
    <content type="html"><![CDATA[<p>在js中，我们可以用<code>var</code>、<code>let</code>、<code>const</code>、<code>function</code>、<code>class</code>这几个关键字来声明一个新的变量，那么这些声明好的变量是存储在哪里的呢，打开浏览器的F12控制台，我们可以看到一些信息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在js中，我们可以用&lt;code&gt;var&lt;/code&gt;、&lt;code&gt;let&lt;/code&gt;、&lt;code&gt;const&lt;/code&gt;、&lt;code&gt;function&lt;/code&gt;、&lt;code&gt;class&lt;/code&gt;这几个关键字来声明一个新的变量，那么这些声明好的变量是存储在哪里的呢</summary>
      
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://example.com/2021/04/17/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2021/04/17/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-17T06:20:09.000Z</published>
    <updated>2021-04-19T14:49:45.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h1><p>观察者模式是指通过一种订阅或者观察的机制，一旦被观察的对象发生变化时，即通知对应的需要知道这个变化的其他对象。比如在vue当中的双向绑定机制，一旦data中的属性发生值改变后，就要通知所有依赖这个值的视图也跟着改变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;dom1&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        age: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">2</span></span><br><span class="line">        &#125;, <span class="number">1000</span>) <span class="comment">// 1s后所有依赖age个视图都会更新一次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在<code>es5</code>中，有<code>Object.defineProperty</code>可以用于定义一个对象的属性，并且可以手动声明该属性的<code>getter</code>和<code>setter</code>方法，做到取值时收集依赖，赋值时更新依赖。在<code>es6</code>中还新增了<code>Proxy</code>这个方式来设置更多的代理的形式。这样我们就能观察<code>obj.data</code>这个对象，一旦他的属性发生变化，我们就能调用对应的回调函数来做依赖更新。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>点击我改变age的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        /**</span><br><span class="line">         * @description 设置观察对象和属性</span><br><span class="line"><span class="javascript">         * @param <span class="built_in">Object</span> obj 被观察的对象</span></span><br><span class="line"><span class="javascript">         * @param <span class="built_in">String</span> target 被观察的属性</span></span><br><span class="line"><span class="javascript">         * @param <span class="built_in">Function</span> callback 发生变化时对应的回调函数</span></span><br><span class="line">        */</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">obj, target, callback</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 这里我们观察的是obj.data，所以做一层容错</span></span></span><br><span class="line">            if(!obj.data) &#123;</span><br><span class="line">                obj.data = &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">// 定义属性，比如obj.age</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">Object</span>.defineProperty(obj, target, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;getter&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 当需要获取obj.age时，实际去obj.data.age取</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.data[target]</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;setter&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 当设置obj.age = 19时，实际设置的是obj.data.age</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.data[target] = val</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 赋值后，调用回调更新所有依赖</span></span></span><br><span class="line">                    callback &amp;&amp; callback(val)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            <span class="comment">// 如果一开始obj.data.age存在，主动调用一次回调</span></span></span><br><span class="line">            if(obj.data[target])&#123;</span><br><span class="line">                callback &amp;&amp; callback(obj.data[target])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                age: 15</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        observer(obj, <span class="string">&#x27;age&#x27;</span>, <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#age&#x27;</span>).innerHTML = value</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn1&#x27;</span>).onclick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">            obj.age += 1</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="和发布订阅模式的区别"><a href="#和发布订阅模式的区别" class="headerlink" title="和发布订阅模式的区别"></a>和发布订阅模式的区别</h1><p>发布订阅又一个平台或者中间件的概念，是N-N的关系，一个订阅者可以同时订阅多个发布者，一个发布者可以同时被多个订阅者订阅。<br>观察者是直接对某个对象进行观察，是1-N的关系，一个被观察者，多个观察者。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;用例&quot;&gt;&lt;a href=&quot;#用例&quot; class=&quot;headerlink&quot; title=&quot;用例&quot;&gt;&lt;/a&gt;用例&lt;/h1&gt;&lt;p&gt;观察者模式是指通过一种订阅或者观察的机制，一旦被观察的对象发生变化时，即通知对应的需要知道这个变化的其他对象。比如在vue当中的双向绑定机制，一旦data中的属性发生值改变后，就要通知所有依赖这个值的视图也跟着改变。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; vm = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    el: &lt;span class=&quot;string&quot;&gt;&amp;#x27;dom1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        age: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;mounted&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.age = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 1s后所有依赖age个视图都会更新一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>发布订阅模式</title>
    <link href="http://example.com/2021/04/17/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2021/04/17/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-16T16:27:50.000Z</published>
    <updated>2021-04-17T06:19:30.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h1><p>发布订阅模式是比较常见的设计模式，按照现实世界的例子，关注了一个博主，那么当他发微博的时候，你就能收到这个消息。不过你不是直接找的博主来给你发消息，博主也不是直接发给你一个人，而是通过微博这个平台来做发布和订阅，你可以订阅不同的博主，博主一发，所有他的关注者都会收到消息。你可以选择取消订阅这个博主，之后不会再收到这个博主的更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">eventbus = <span class="keyword">new</span> Eventbus()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> evTag = eventbus.$on(<span class="string">&#x27;update&#x27;</span>, <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;name&#125;</span>, you are <span class="subst">$&#123;age&#125;</span> years old.`</span>)</span><br><span class="line">&#125;) <span class="comment">// 订阅</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> evTag2 = eventbus.$on(<span class="string">&#x27;update&#x27;</span>, <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, are you <span class="subst">$&#123;age&#125;</span> years old?`</span>)</span><br><span class="line">&#125;) <span class="comment">// 另一份订阅</span></span><br><span class="line"></span><br><span class="line">eventbus.$emit(<span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;Tim&#x27;</span>, <span class="number">18</span>) <span class="comment">// 发布</span></span><br><span class="line"></span><br><span class="line">eventbus.$off(evTag) <span class="comment">// 解除订阅</span></span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul><li><code>$on</code>接受两个参数，第一个是事件名称，第二个是到时候执行的对应函数，并且返回一个标志，后面可以用这个标志取消订阅。并且可以多次监听同一个事件，彼此不会影响。</li><li><code>$emit</code>就可以接受不定数量的参数，但是第一个是要发布的事件，后面的就是跟着发出去的参数，其实也可以用一个对象来传递，而不是拆成好几个</li><li><code>$off</code>只接受<code>$on</code>时返回的标志，用来取消掉订阅</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Eventbus</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventList = &#123;&#125; <span class="comment">// 维护一个空列表，总体结构如下</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123; </span></span><br><span class="line"><span class="comment">         *   eventName1: &#123;</span></span><br><span class="line"><span class="comment">         *      evTag: callback,</span></span><br><span class="line"><span class="comment">         *      evTag2: callback2,</span></span><br><span class="line"><span class="comment">         *   &#125;,</span></span><br><span class="line"><span class="comment">         *   eventName2: &#123;</span></span><br><span class="line"><span class="comment">         *      evTag3: callback3,</span></span><br><span class="line"><span class="comment">         *      evTag4: callback4,</span></span><br><span class="line"><span class="comment">         *   &#125;</span></span><br><span class="line"><span class="comment">         * &#125;</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="built_in">this</span>.evTag = <span class="number">0</span> <span class="comment">// $on返回标志，也是一个内部计数器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>发起一个监听</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>String eventName 事件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>Function&#125; callback 回调函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>Number 返回此次订阅的标志，后面可以用这个标志来解除此次订阅</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    $on(eventName, callback) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.eventList[eventName]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.eventList[eventName][<span class="built_in">this</span>.evTag] = callback</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.eventList[eventName] = &#123;</span><br><span class="line">                [<span class="built_in">this</span>.evTag]: callback</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.evTag++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>发起一次发布</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>String eventName 此次发布的事件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>Any args 需要传递的参数，注意此处用...来收集剩余的参数到一个数组args中</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    $emit(eventName, ...args) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.eventList[eventName]) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.eventList[eventName]) &#123;</span><br><span class="line">                <span class="built_in">this</span>.eventList[eventName][i](...args)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>解除一个订阅</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>Number evTag 需要解除的订阅标志</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    $off(evTag) &#123;</span><br><span class="line">        <span class="keyword">let</span> done = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">this</span>.eventList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (done) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">in</span> i) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j == evTag) &#123;</span><br><span class="line">                    <span class="keyword">delete</span> <span class="built_in">this</span>.eventList[i][j]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eventbus = <span class="keyword">new</span> Eventbus()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> evTag = eventbus.$on(<span class="string">&#x27;update&#x27;</span>, <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;name&#125;</span>, you are <span class="subst">$&#123;age&#125;</span> years old.`</span>)</span><br><span class="line">&#125;) <span class="comment">// 订阅</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> evTag2 = eventbus.$on(<span class="string">&#x27;update&#x27;</span>, <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, are you <span class="subst">$&#123;age&#125;</span> years old?`</span>)</span><br><span class="line">&#125;) <span class="comment">// 另一份订阅</span></span><br><span class="line"></span><br><span class="line">eventbus.$emit(<span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;Tim&#x27;</span>, <span class="number">18</span>) <span class="comment">// 发布</span></span><br><span class="line"></span><br><span class="line">eventbus.$off(evTag) <span class="comment">// 解除订阅</span></span><br><span class="line"></span><br><span class="line">eventbus.$emit(<span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="number">18</span>) <span class="comment">// 发布</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hi Tim, you are 18 years old.</span></span><br><span class="line"><span class="comment">// Hello Tim, are you 18 years old?</span></span><br><span class="line"><span class="comment">// Hello Alice, are you 18 years old?</span></span><br></pre></td></tr></table></figure><p>可以看到有两次关于<code>Tim</code>的信息，但是已有一份<code>Alice</code>的信息，那是因为有一份订阅被解除了</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>代码解藕，发布和订阅的双方都只需要关注自己的代码就行，不需要关心谁发布的这个消息，或者是谁订阅了这个消息</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ul><li>一旦事件多了，就会很乱，相信都有过被满天飞的<code>eventbus</code>支配的恐惧，就像有无数的饿狼在黑暗中盯着你，一动他就扑上来</li><li>，因为需要各个执行回调,所以事件多了之后，性能也会收到影响</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;用例&quot;&gt;&lt;a href=&quot;#用例&quot; class=&quot;headerlink&quot; title=&quot;用例&quot;&gt;&lt;/a&gt;用例&lt;/h1&gt;&lt;p&gt;发布订阅模式是比较常见的设计模式，按照现实世界的例子，关注了一个博主，那么当他发微博的时候，你就能收到这个消息。不过你不是直接找的博主来给你发消息，博主也不是直接发给你一个人，而是通过微博这个平台来做发布和订阅，你可以订阅不同的博主，博主一发，所有他的关注者都会收到消息。你可以选择取消订阅这个博主，之后不会再收到这个博主的更新。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;eventbus = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Eventbus()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; evTag = eventbus.$on(&lt;span class=&quot;string&quot;&gt;&amp;#x27;update&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Hi &lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;, you are &lt;span class=&quot;subst&quot;&gt;$&amp;#123;age&amp;#125;&lt;/span&gt; years old.`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;) &lt;span class=&quot;comment&quot;&gt;// 订阅&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; evTag2 = eventbus.$on(&lt;span class=&quot;string&quot;&gt;&amp;#x27;update&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Hello &lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;, are you &lt;span class=&quot;subst&quot;&gt;$&amp;#123;age&amp;#125;&lt;/span&gt; years old?`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;) &lt;span class=&quot;comment&quot;&gt;// 另一份订阅&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eventbus.$emit(&lt;span class=&quot;string&quot;&gt;&amp;#x27;update&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;Tim&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 发布&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eventbus.$off(evTag) &lt;span class=&quot;comment&quot;&gt;// 解除订阅&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>实现一个lazyman</title>
    <link href="http://example.com/2021/04/16/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAlazyman/"/>
    <id>http://example.com/2021/04/16/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAlazyman/</id>
    <published>2021-04-16T08:00:54.000Z</published>
    <updated>2021-04-16T16:23:39.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><p>实现一个函数，具有以下效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">LazyMan(<span class="string">&quot;Hank&quot;</span>)</span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line">Hi! This is Hank!</span><br><span class="line"></span><br><span class="line">LazyMan(<span class="string">&quot;Hank&quot;</span>).sleep(<span class="number">10</span>).eat(<span class="string">&quot;dinner&quot;</span>)</span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line">Hi! This is Hank!</span><br><span class="line"><span class="comment">// 等待10秒..</span></span><br><span class="line">Wake up after 10s</span><br><span class="line">Eat dinner~</span><br><span class="line"></span><br><span class="line">LazyMan(<span class="string">&quot;Hank&quot;</span>).eat(<span class="string">&quot;dinner&quot;</span>).eat(<span class="string">&quot;supper&quot;</span>)</span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line">Hi This is Hank!</span><br><span class="line">Eat dinner~</span><br><span class="line">Eat supper~</span><br><span class="line"></span><br><span class="line">LazyMan(<span class="string">&quot;Hank&quot;</span>).sleepFirst(<span class="number">5</span>).eat(<span class="string">&quot;supper&quot;</span>)</span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line"><span class="comment">// 等待5秒</span></span><br><span class="line">Wake up after 5s</span><br><span class="line">Hi This is Hank!</span><br><span class="line">Eat supper</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul><li><code>LazyMan(username)</code>函数接受一个用户名，可以打印出来</li><li><code>sleep(second)</code>函数接受秒数，睡眠对应时间后继续往后执行</li><li><code>sleepFirst(second)</code>函数接受秒数，睡眠对应事件后才开始输出用户名，并继续执行</li><li><code>eat(foodType)</code>函数接受用餐类型，可以打印出来</li></ul><p>这里比较难的应该是怎么让函数睡眠，并且睡眠后才继续执行。我们的思路是维护一个任务队列，队列的内容就是具体的上面的函数，每个函数执行到最后，再从队列中拿出任务继续执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LZ</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">username</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.taskList = [] <span class="comment">// 任务队列</span></span><br><span class="line">        <span class="built_in">this</span>.sayName(username) <span class="comment">// 压入一个打印名字的任务</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.next() <span class="comment">// 在微任务中开始执行任务队列</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span> <span class="comment">// 返回this，使得可以链式调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.taskList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> fn = <span class="built_in">this</span>.taskList.shift();</span><br><span class="line">            fn()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params">username</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`Hi This is <span class="subst">$&#123;username&#125;</span>!`</span>)</span><br><span class="line">            <span class="built_in">this</span>.next() <span class="comment">// 调用下一个任务</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.taskList.push(fn) <span class="comment">// 把任务放到队列末尾</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params">foodType</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`Eat <span class="subst">$&#123;foodType&#125;</span>`</span>)</span><br><span class="line">            <span class="built_in">this</span>.next()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.taskList.push(fn)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sleepFirst</span>(<span class="params">second</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`Wake up after <span class="subst">$&#123;second&#125;</span>s`</span>)</span><br><span class="line">                <span class="built_in">this</span>.next()</span><br><span class="line">            &#125;, second * <span class="number">1000</span>) <span class="comment">// 延迟执行下一个任务</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.taskList.unshift(fn) <span class="comment">// 这里要把任务放到队列开头，因为是一开头就要睡眠</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sleep</span>(<span class="params">second</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`Wake up after <span class="subst">$&#123;second&#125;</span>s`</span>)</span><br><span class="line">                <span class="built_in">this</span>.next()</span><br><span class="line">            &#125;, second * <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.taskList.push(fn)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LazyMan</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LZ(username)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LazyMan(<span class="string">&#x27;Tim&#x27;</span>).sleepFirst(<span class="number">5</span>).eat(<span class="string">&#x27;supper&#x27;</span>).sleep(<span class="number">2</span>).eat(<span class="string">&#x27;dinner&#x27;</span>)</span><br><span class="line"><span class="comment">//Wake up after 5s</span></span><br><span class="line"><span class="comment">//Hi This is Tim!</span></span><br><span class="line"><span class="comment">//Eat supper</span></span><br><span class="line"><span class="comment">//Wake up after 2s</span></span><br><span class="line"><span class="comment">//Eat dinner</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>可以看到整体并不是很复杂的逻辑，主要难点是任务队列的思想以及在微任务中调用队列这两点</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;要求&quot;&gt;&lt;a href=&quot;#要求&quot; class=&quot;headerlink&quot; title=&quot;要求&quot;&gt;&lt;/a&gt;要求&lt;/h1&gt;&lt;p&gt;实现一个函数，具有以下效果&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LazyMan(&lt;span class=&quot;string&quot;&gt;&amp;quot;Hank&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hi! This is Hank!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LazyMan(&lt;span class=&quot;string&quot;&gt;&amp;quot;Hank&amp;quot;&lt;/span&gt;).sleep(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;).eat(&lt;span class=&quot;string&quot;&gt;&amp;quot;dinner&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hi! This is Hank!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等待10秒..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Wake up after 10s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Eat dinner~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LazyMan(&lt;span class=&quot;string&quot;&gt;&amp;quot;Hank&amp;quot;&lt;/span&gt;).eat(&lt;span class=&quot;string&quot;&gt;&amp;quot;dinner&amp;quot;&lt;/span&gt;).eat(&lt;span class=&quot;string&quot;&gt;&amp;quot;supper&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hi This is Hank!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Eat dinner~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Eat supper~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LazyMan(&lt;span class=&quot;string&quot;&gt;&amp;quot;Hank&amp;quot;&lt;/span&gt;).sleepFirst(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;).eat(&lt;span class=&quot;string&quot;&gt;&amp;quot;supper&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等待5秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Wake up after 5s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hi This is Hank!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Eat supper&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>9、回文数判断</title>
    <link href="http://example.com/2021/04/12/leetcode-9-%E5%9B%9E%E6%96%87%E6%95%B0%E5%88%A4%E6%96%AD/"/>
    <id>http://example.com/2021/04/12/leetcode-9-%E5%9B%9E%E6%96%87%E6%95%B0%E5%88%A4%E6%96%AD/</id>
    <published>2021-04-12T15:56:03.000Z</published>
    <updated>2021-04-16T05:52:01.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: <span class="number">121</span></span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: -<span class="number">121</span></span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line">解释: 从左向右读, 为 -<span class="number">121</span> 。 从右向左读, 为 <span class="number">121</span>- 。因此它不是一个回文数。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>:</span><br><span class="line">输入: <span class="number">10</span></span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line">解释: 从右向左读, 为 <span class="number">01</span> 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p>进阶:<br>你能不将整数转为字符串来解决这个问题吗？</p><span id="more"></span><h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先排查负数，然后把数字变成数组，然后依次比较数组中心对称的位置是否相等，<br>直到有不等的，则说明不是回文数，或者下标大于数组的一半则说明是回文数</p><h2 id="算法核心"><a href="#算法核心" class="headerlink" title="算法核心"></a>算法核心</h2><p>利用数组镜像比较</p><h2 id="代入数据"><a href="#代入数据" class="headerlink" title="代入数据"></a>代入数据</h2><ul><li>121变成数组m[1, 2, 1]</li><li>拿m[0]和m[m.length - 0 - 1]比较，也就是m[0]和m[2]比较，发现相等</li><li>拿m[1]和m[m.length - 1 - 1]比较，也就是m[1]和m[1]比较，自然是等的</li><li>m[2]数组下标2大于m.length / 2了，说明数组过半，说明是回文数</li></ul><h2 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"> &#125;</span><br><span class="line"> x = (<span class="string">&#x27;&#x27;</span> + x).split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; x.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (x[i] !== x[x.length - i - <span class="number">1</span>]) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>首先排除负数，然后把数字变成数组，再一直循环比较数组最前的元素和数组最后元素，直到不等或者数组只剩一个元素</p><h2 id="算法核心-1"><a href="#算法核心-1" class="headerlink" title="算法核心"></a>算法核心</h2><p>利用数组的pop和shift</p><h2 id="代入数据-1"><a href="#代入数据-1" class="headerlink" title="代入数据"></a>代入数据</h2><ul><li>121变数组m[1,2,1]</li><li>m.pop() 和m.shift()比较，也就是1 === 1</li><li>数组m.length 为1</li><li>是回文数</li></ul><h2 id="实际代码-1"><a href="#实际代码-1" class="headerlink" title="实际代码"></a>实际代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> arr = (<span class="string">&#x27;&#x27;</span> + x).split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> <span class="keyword">while</span>(arr.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (arr.pop() !== arr.shift()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;示例 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;number&quot;&gt;121&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: -&lt;span class=&quot;number&quot;&gt;121&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 从左向右读, 为 -&lt;span class=&quot;number&quot;&gt;121&lt;/span&gt; 。 从右向左读, 为 &lt;span class=&quot;number&quot;&gt;121&lt;/span&gt;- 。因此它不是一个回文数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 从右向左读, 为 &lt;span class=&quot;number&quot;&gt;01&lt;/span&gt; 。因此它不是一个回文数。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进阶:&lt;br&gt;你能不将整数转为字符串来解决这个问题吗？&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>7、整数反转</title>
    <link href="http://example.com/2021/04/12/leetcode-7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    <id>http://example.com/2021/04/12/leetcode-7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</id>
    <published>2021-04-12T15:55:00.000Z</published>
    <updated>2021-04-12T16:00:03.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例<span class="number">1</span>:</span><br><span class="line">输入: <span class="number">123</span></span><br><span class="line">输出: <span class="number">321</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: -<span class="number">123</span></span><br><span class="line">输出: -<span class="number">321</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>:</span><br><span class="line">输入: <span class="number">120</span></span><br><span class="line">输出: <span class="number">21</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为<code>[−231, 231− 1]</code>。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><span id="more"></span><h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>笨比方法，照着题目写解题步骤，先判断x是不是大于0，<br>然后把x转成字符串，再转成数组，再反转数组，再拼接成字符串，再解析成数字<br>然后看是不是溢出了，是的话直接返回0<br>然后看x是不是正数，是的话直接返回，不是就取负再返回</p><h2 id="算法核心"><a href="#算法核心" class="headerlink" title="算法核心"></a>算法核心</h2><p>老老实实写步骤，又不是不能用</p><h2 id="代入数据"><a href="#代入数据" class="headerlink" title="代入数据"></a>代入数据</h2><ul><li>-123小于0</li><li>-123变字符串’-123’</li><li>‘-123’变数组[‘-‘, ‘1’, ‘2’, ‘3’]</li><li>[‘-‘, ‘1’, ‘2’, ‘3’]反转，变[‘3’, ‘2’, ‘1’, ‘-‘]</li><li>[‘3’, ‘2’, ‘1’, ‘-‘]拼接成字符串’321-‘</li><li>‘321-‘解析出数字321</li><li>-123是负数，所以返回-321</li></ul><h2 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = x &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">parseInt</span>((<span class="string">&#x27;&#x27;</span> + x).split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> (result &gt; (<span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>) || result &lt; ((-<span class="number">2</span>)**<span class="number">31</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a) &#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><h2 id="算法核心-1"><a href="#算法核心-1" class="headerlink" title="算法核心"></a>算法核心</h2><h2 id="代入数据-1"><a href="#代入数据-1" class="headerlink" title="代入数据"></a>代入数据</h2><h2 id="实际代码-1"><a href="#实际代码-1" class="headerlink" title="实际代码"></a>实际代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x !== <span class="number">0</span>) &#123;</span><br><span class="line">        result = result * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">        x = (x / <span class="number">10</span>) | <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (result | <span class="number">0</span>) === result ? result : <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;示例&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;number&quot;&gt;321&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: -&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: -&lt;span class=&quot;number&quot;&gt;321&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;示例 &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为&lt;code&gt;[−231, 231− 1]&lt;/code&gt;。请根据这个假设，如果反转后整数溢出那么就返回 0。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>1、两数之和</title>
    <link href="http://example.com/2021/04/12/leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://example.com/2021/04/12/leetcode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2021-04-12T15:48:28.000Z</published>
    <updated>2021-04-12T16:00:08.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span></span><br><span class="line">所以返回 [<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>暴力循环，从左到右依次取<code>nums</code>中的值，与被取的值之后的数相加，得出<code>target</code>的值，就是需要的两个数</p><h2 id="算法核心"><a href="#算法核心" class="headerlink" title="算法核心"></a>算法核心</h2><p>最简单的循环，最直接的思路</p><h2 id="代入数据"><a href="#代入数据" class="headerlink" title="代入数据"></a>代入数据</h2><ul><li>取<code>nums[0]</code>，也就是<code>2</code>,</li><li><code>2 + nums[1] === 9</code></li><li>返回<code>[0,1]</code></li></ul><h2 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] === target) &#123;</span><br><span class="line">                <span class="keyword">return</span> [i, j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>用数组的map算法，依次取nums中的值n，然后用数组indexOf方法，找出数组中往后等于target-n的值的下标，然后返回n的下标和target-n的下标</p><h2 id="算法核心-1"><a href="#算法核心-1" class="headerlink" title="算法核心"></a>算法核心</h2><p>直接在数组中找target-n的索引</p><h2 id="代入数据-1"><a href="#代入数据-1" class="headerlink" title="代入数据"></a>代入数据</h2><ul><li>取<code>nums[0]</code>，也就是<code>2</code></li><li>尝试寻找<code>nums.indexOf(9-2, 1)</code>的值</li><li>找到有<code>索引1</code>的存在</li><li>返回<code>[0, 1]</code></li><li>取<code>nums[1]</code>,也就是<code>7</code></li><li>尝试寻找<code>nums.indexOf(9-7, 2)</code>的值</li><li>找不到，返回<code>undefined</code></li><li>依此类推，整个数组最后得到<code>[[0,1], undefined, undefined, undefined]</code></li><li>所以还需要对结果数组进行<code>filter</code>过滤，去掉为<code>undefined</code>的值</li><li>因为题目假设必定有结果，所以直接取过滤后的<code>数组[0]</code>即可</li></ul><h2 id="实际代码-1"><a href="#实际代码-1" class="headerlink" title="实际代码"></a>实际代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums.map(<span class="function">(<span class="params">el, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> a = nums.indexOf(target - el, index + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (a &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [index, a]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).filter(<span class="function"><span class="params">i</span> =&gt;</span> i !== <span class="literal">undefined</span>)[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解法3"><a href="#解法3" class="headerlink" title="解法3"></a>解法3</h1><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>找一个可存取键值对的数据结构m，依次取nums中的值n，然后看m中是否有target-n的键值对，有则说明他们是题解，没有则把n和n的下标分别作为键和值存到m中。然后取nums下一个值，继续比较</p><h2 id="算法核心-2"><a href="#算法核心-2" class="headerlink" title="算法核心"></a>算法核心</h2><p>找到一个数据结构，可以快速存储曾经取过的数据键值对，这样就不用再轮询数组中是否存在target-n了</p><h2 id="代入数据-2"><a href="#代入数据-2" class="headerlink" title="代入数据"></a>代入数据</h2><ul><li>取<code>nums[0]</code>，也就是<code>2</code></li><li>取<code>map.get(9-2)</code>，没取到</li><li>把<code>2</code>的值和下标<code>0</code>存到<code>map</code>，也就是<code>map.set(nums[0],0)</code></li><li>取<code>nums[1]</code>，也就是<code>7</code></li><li>取<code>map.get(9-7)</code>，取到了刚才存进去的<code>2</code></li><li>返回<code>[map.get(9-7), 1]</code>，也就是<code>[0, 1]</code></li></ul><h2 id="实际代码-2"><a href="#实际代码-2" class="headerlink" title="实际代码"></a>实际代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">      <span class="keyword">const</span> otherIndex = map.get(target - nums[i])</span><br><span class="line">      <span class="keyword">if</span> (otherIndex !== <span class="literal">undefined</span>) <span class="keyword">return</span> [otherIndex, i]</span><br><span class="line">      map.set(nums[i], i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。&lt;/p&gt;
&lt;p&gt;你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;给定 nums = [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;], target = &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;因为 nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + nums[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所以返回 [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>学习bind-call-apply</title>
    <link href="http://example.com/2021/04/12/%E5%AD%A6%E4%B9%A0bind-call-apply/"/>
    <id>http://example.com/2021/04/12/%E5%AD%A6%E4%B9%A0bind-call-apply/</id>
    <published>2021-04-12T15:37:16.000Z</published>
    <updated>2021-04-12T15:38:19.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>首先看一段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    username: <span class="string">&#x27;Tim&#x27;</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params">age, food</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`I am <span class="subst">$&#123;<span class="built_in">this</span>.username&#125;</span>,<span class="subst">$&#123;age&#125;</span> years old, and I like <span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> say = person.say</span><br><span class="line">person.say(<span class="number">10</span>, <span class="string">&#x27;banana&#x27;</span>) <span class="comment">// I am Tim,10 years old, and I like banana</span></span><br><span class="line">say(<span class="number">10</span>, <span class="string">&#x27;banana&#x27;</span>) <span class="comment">// I am global,10 years old, and I like banana</span></span><br></pre></td></tr></table></figure><p>为什么执行单独的<code>say()</code>结果会输出<code>global</code>呢？这是因为js当中的<code>this</code>是和运行时再实际套用进去的，并不是编写代码时就固定下来。所以导致单独解析<code>person.say</code>出来后，实际代码变成下面这一份了</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.username = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"><span class="built_in">window</span>.person = &#123;</span><br><span class="line">    username: <span class="string">&#x27;Tim&#x27;</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params">age, food</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`I am <span class="subst">$&#123;<span class="built_in">this</span>.username&#125;</span>,<span class="subst">$&#123;age&#125;</span> years old, and I like <span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.say = <span class="built_in">window</span>.person.say</span><br><span class="line"><span class="built_in">window</span>.person.say(<span class="number">10</span>, <span class="string">&#x27;banana&#x27;</span>) <span class="comment">// 此时say当中的this指向person</span></span><br><span class="line"><span class="built_in">window</span>.say(<span class="number">10</span>, <span class="string">&#x27;banana&#x27;</span>) <span class="comment">// 此时say当中的this指向window</span></span><br></pre></td></tr></table></figure><p>所以为了避免这一种情况，js提供了<code>bind</code>、<code>call</code>、<code>apply</code>三个方法，可以手动指定一个函数执行时，当中的<code>this</code>要指向谁，比如我希望拆解出来的<code>person.say</code>，执行之后也还是能正确输出<code>Tim</code>，需要怎么做呢？</p><h2 id="指定函数执行时的this"><a href="#指定函数执行时的this" class="headerlink" title="指定函数执行时的this"></a>指定函数执行时的this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    username: <span class="string">&#x27;Tim&#x27;</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params">age, food</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`I am <span class="subst">$&#123;<span class="built_in">this</span>.username&#125;</span>,<span class="subst">$&#123;age&#125;</span> years old, and I like <span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> say = person.say.bind(person, <span class="number">10</span>, <span class="string">&#x27;banana&#x27;</span>)</span><br><span class="line">say() <span class="comment">// I am Tim,10 years old, and I like banana</span></span><br><span class="line">person.say.call(person, <span class="number">10</span>, <span class="string">&#x27;banana&#x27;</span>) <span class="comment">// I am Tim,10 years old, and I like banana</span></span><br><span class="line">person.say.apply(person, [<span class="number">10</span>, <span class="string">&#x27;banana&#x27;</span>]) <span class="comment">// I am Tim,10 years old, and I like banana</span></span><br></pre></td></tr></table></figure><p>由此可见这三个函数都可以指定函数执行时的this指向谁，区别主要是以下两点</p><ol><li>bind函数返回的是一个函数，需要手动执行函数</li><li>apply接受的参数需要放在一个数组中</li></ol><h2 id="模拟-call"><a href="#模拟-call" class="headerlink" title="模拟 call"></a>模拟 call</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = ctx || <span class="built_in">window</span></span><br><span class="line">    ctx.fn = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">var</span> args = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        args.push(<span class="string">&#x27;arguments[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;ctx.fn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">delete</span> ctx.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> username = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    username: <span class="string">&#x27;Tim&#x27;</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params">age, food</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`I am <span class="subst">$&#123;<span class="built_in">this</span>.username&#125;</span>,<span class="subst">$&#123;age&#125;</span> years old, and I like <span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> say = person.say.call2(person, <span class="number">10</span>, <span class="string">&#x27;banana&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="模拟-apply"><a href="#模拟-apply" class="headerlink" title="模拟 apply"></a>模拟 apply</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply2 = <span class="function"><span class="keyword">function</span>(<span class="params">ctx, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = ctx || <span class="built_in">window</span></span><br><span class="line">    ctx.fn = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">var</span> result</span><br><span class="line">    <span class="keyword">if</span>(arr) &#123;</span><br><span class="line">        <span class="keyword">var</span> args = []</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            args.push(<span class="string">&#x27;arr[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="built_in">eval</span>(<span class="string">&#x27;ctx.fn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = ctx.fn()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> ctx.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> username = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    username: <span class="string">&#x27;Tim&#x27;</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params">age, food</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`I am <span class="subst">$&#123;<span class="built_in">this</span>.username&#125;</span>,<span class="subst">$&#123;age&#125;</span> years old, and I like <span class="subst">$&#123;food&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> say = person.say.apply2(person, [<span class="string">&#x27;tim&#x27;</span>,<span class="number">10</span>, <span class="string">&#x27;banana&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;首先看一段代码&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; username = &lt;span class=&quot;string&quot;&gt;&amp;#x27;global&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username: &lt;span class=&quot;string&quot;&gt;&amp;#x27;Tim&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    say: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;age, food&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`I am &lt;span class=&quot;subst&quot;&gt;$&amp;#123;&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.username&amp;#125;&lt;/span&gt;,&lt;span class=&quot;subst&quot;&gt;$&amp;#123;age&amp;#125;&lt;/span&gt; years old, and I like &lt;span class=&quot;subst&quot;&gt;$&amp;#123;food&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; say = person.say&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.say(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;banana&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// I am Tim,10 years old, and I like banana&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;say(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;banana&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// I am global,10 years old, and I like banana&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为什么执行单独的&lt;code&gt;say()&lt;/code&gt;结果会输出&lt;code&gt;global&lt;/code&gt;呢？这是因为js当中的&lt;code&gt;this&lt;/code&gt;是和运行时再实际套用进去的，并不是编写代码时就固定下来。所以导致单独解析&lt;code&gt;person.say&lt;/code&gt;出来后，实际代码变成下面这一份了&lt;/p&gt;</summary>
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>自己实现new关键字</title>
    <link href="http://example.com/2021/04/12/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0new%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://example.com/2021/04/12/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0new%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2021-04-12T15:13:06.000Z</published>
    <updated>2021-04-12T15:20:03.544Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>js</code>中，我们会用到<code>new</code>这一个关键字，用来实例化一个对象，最常规的用法是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Persion(<span class="string">&#x27;tim&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1.name) <span class="comment">// tim</span></span><br></pre></td></tr></table></figure><p>这个时候我们就能得到一个具体的人<code>p1</code>，他的名字是<code>tim</code>，如果我们自己实现的话，需要考虑原型链的显式指向，因为不能覆盖<code>new</code>这个关键字，所以我们用一个<code>function</code>代替，具体的调用方式是<code>const p1 = myNew(Person, &#39;tim&#39;)</code></p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 首先我们要拿到第一个实参作为构造函数，也就是Person</span></span><br><span class="line">    <span class="keyword">const</span> Constructor = [].shift.call(<span class="built_in">arguments</span>) <span class="comment">// 这里的Constructor实际就是Person</span></span><br><span class="line">    <span class="comment">// 然后我们实例化一个空对象，用于最后返回，也就是p1</span></span><br><span class="line">    <span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>) <span class="comment">// 实例化一个干净的对象</span></span><br><span class="line">    <span class="comment">// const obj = &#123;&#125; 这样实例化的话问题也不大，但是会带有一些默认的属性</span></span><br><span class="line">    <span class="comment">// 然后我们要把这个obj.__proto__指向Constructor.prototype，带入实际情况就是p1.__proto__指向Person.prototype</span></span><br><span class="line">    obj.__proto__ = Constructor.prototype</span><br><span class="line">    <span class="comment">// 然后需要obj的作用域来调用一次构造函数，这样Person代码当中的this就能指向我们的obj了</span></span><br><span class="line">    Constructor.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = myNew(Person, <span class="string">&#x27;tim&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1.name) <span class="comment">// tim</span></span><br></pre></td></tr></table></figure><p>但是还有一种特殊的情况，在构造函数中返回一个对象的话，实例化的结果会是返回的对象，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: <span class="string">&#x27;from return&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;tim&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1.name) <span class="comment">// from return</span></span><br></pre></td></tr></table></figure><p>这就很giao了，而且目前为止我还没有碰到过这个特性的实际用处，不过我们仍然能够在<code>myNew</code>中判断一次，也返回这个<code>fron return</code>的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> Constructor = [].shift.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    obj.__proto__ = Constructor.prototype</span><br><span class="line">    <span class="keyword">const</span> rt = Constructor.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">// 如果执行的结果是Object类型，那就返回，否则返回我们内部的obj</span></span><br><span class="line">    <span class="keyword">return</span> rt <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? rt : obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = myNew(Person, <span class="string">&#x27;tim&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1.name) <span class="comment">// tim</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;code&gt;js&lt;/code&gt;中，我们会用到&lt;code&gt;new&lt;/code&gt;这一个关键字，用来实例化一个对象，最常规的用法是&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; p1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Persion(&lt;span class=&quot;string&quot;&gt;&amp;#x27;tim&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(p1.name) &lt;span class=&quot;comment&quot;&gt;// tim&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个时候我们就能得到一个具体的人&lt;code&gt;p1&lt;/code&gt;，他的名字是&lt;code&gt;tim&lt;/code&gt;，如果我们自己实现的话，需要考虑原型链的显式指向，因为不能覆盖&lt;code&gt;new&lt;/code&gt;这个关键字，所以我们用一个&lt;code&gt;function&lt;/code&gt;代替，具体的调用方式是&lt;code&gt;const p1 = myNew(Person, &amp;#39;tim&amp;#39;)&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
    <category term="new" scheme="http://example.com/tags/new/"/>
    
  </entry>
  
</feed>
